# render.yaml
services:
  - type: web
    name: tribunal-django-backend # Puedes cambiar este nombre
    env: python
    buildCommand: "pip install -r requirements.txt && python manage.py collectstatic --noinput"
    startCommand: "gunicorn tribunal_backend_django.wsgi:application" # Asegúrate que tribunal_backend_django sea el nombre de tu carpeta principal del proyecto
    # Para que gunicorn pueda escuchar peticiones, necesita una bind a 0.0.0.0 o la IP de Render
    # Normalmente, el comando `gunicorn tu_proyecto.wsgi:application` ya funciona con el puerto por defecto de Render
    # si quieres especificar un puerto, sería: gunicorn --bind 0.0.0.0:$PORT tu_proyecto.wsgi:application
    # Pero $PORT se inyecta automáticamente, así que la línea de arriba debería ser suficiente.
    healthCheckPath: /admin/login/ # O alguna otra URL que siempre funcione
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: tribunal_django_db # El nombre de tu base de datos (ver siguiente sección)
          property: connectionString
      - key: SECRET_KEY
        generateValue: true # Render generará una SECRET_KEY segura por ti
      - key: WEB_CONCURRENCY # Para gunicorn, ajusta según la capacidad
        value: 4 # Puedes ajustar esto, por ejemplo 2, 4, 8.
  - type: pserv
    name: tribunal_django_db # Nombre de la base de datos
    env: postgres
    plan: free # Plan gratuito
    databaseName: tribunal_db # Nombre de la base de datos real
    ipAllowList: [] # Puedes dejarlo vacío para que sea accesible desde otros servicios de Render.